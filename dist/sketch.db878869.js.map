{"version":3,"sources":["vector.js","point.js","utils.js","config.js","person.js","sketch.js"],"names":["Vector","x","y","Math","sqrt","pow","vector","value","divide","len","multiply","Point","point","randInt","min","max","floor","randUniform","random","MAX_SPAWN_VEL","BORDER_WIND_STRENGTH","BORDER_WIND_MARGIN","SEPARATION_THRESHOLD","SEPARATION_STRENGTH","ALIGNMENT_THRESHOLD","ALIGNMENT_STRENGTH","COHESION_THRESHOLD","COHESION_STRENGTH","SPEED_LIMIT","RECOVERY_TIME","TRANSMISSION_RATE","dist","DEATH_RATE","leftWind","rightWind","topWind","bottomWind","Person","infected","id","pos","innerWidth","innerHeight","vel","wasInfected","people","Date","console","log","add","person","personToSelf","vectorTo","originalLength","normalize","averageVel","alignmentCounter","averageX","averageY","cohesionCounter","cohesionVector","move","fill","circle","dead","windowResized","resizeCanvas","setup","createCanvas","i","push","update","filter","v","draw","clear"],"mappings":"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","file":"sketch.db878869.js","sourceRoot":"../src","sourcesContent":["export default class Vector {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    len() {\n        return Math.sqrt(\n            Math.pow(this.x, 2) +\n            Math.pow(this.y, 2)\n        );\n    }\n\n    add(vector) {\n        this.x += vector.x;\n        this.y += vector.y;\n    }\n\n    subtract(vector) {\n        this.x -= vector.x;\n        this.y -= vector.y;\n    }\n\n    multiply(value) {\n        this.x *= value;\n        this.y *= value;\n    }\n\n    divide(value) {\n        if (value !== 0) {\n            this.x /= value;\n            this.y /= value;\n        }\n    }\n\n    normalize(value=1) {\n        this.divide(this.len());\n        this.multiply(value);\n    }\n}","import Vector from \"./vector\";\n\nexport default class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    move(vector) {\n        this.x += vector.x;\n        this.y += vector.y;\n    }\n\n    vectorTo(point) {\n        return new Vector(point.x - this.x, point.y - this.y);\n    }\n}\n","export function randInt(min, max) {\n    return Math.floor(randUniform(min, max));\n}\n\nexport function randUniform(min, max) {\n    return (Math.random() * (max - min)) + min;\n}\n","export const MAX_SPAWN_VEL = 3;\nexport const BORDER_WIND_STRENGTH = .3;\nexport const BORDER_WIND_MARGIN = 100;\nexport const SEPARATION_THRESHOLD = 50;\nexport const SEPARATION_STRENGTH = 10;\nexport const ALIGNMENT_THRESHOLD = 40;\nexport const ALIGNMENT_STRENGTH = .3;\nexport const COHESION_THRESHOLD = 40;\nexport const COHESION_STRENGTH = .02;\nexport const SPEED_LIMIT = 4;\nexport const RECOVERY_TIME = 5000;\nexport const TRANSMISSION_RATE = dist => Math.random() <= 4 / dist;\nexport const DEATH_RATE = 0.00013;\n// y = 2^dist\n// export const TRANSMISSION_RATE = dist => {\n    // let chance = 0.5/Math.pow(2, dist);\n    // console.log(chance);\n    // return Math.random() >= chance;\n// };\n","import Vector from \"./vector\";\nimport Point from \"./point\";\nimport {randInt, randUniform} from \"./utils\";\nimport {\n    MAX_SPAWN_VEL,\n    BORDER_WIND_MARGIN,\n    BORDER_WIND_STRENGTH,\n    SEPARATION_THRESHOLD,\n    SEPARATION_STRENGTH,\n    ALIGNMENT_THRESHOLD,\n    ALIGNMENT_STRENGTH,\n    COHESION_THRESHOLD,\n    COHESION_STRENGTH,\n    SPEED_LIMIT,\n    TRANSMISSION_RATE,\n    DEATH_RATE,\n    RECOVERY_TIME\n} from \"./config\";\n\nconst leftWind = new Vector(BORDER_WIND_STRENGTH, 0);\nconst rightWind = new Vector(-BORDER_WIND_STRENGTH, 0);\nconst topWind = new Vector(0, BORDER_WIND_STRENGTH);\nconst bottomWind = new Vector(0, -BORDER_WIND_STRENGTH);\n\nexport default class Person {\n    constructor(infected, id) {\n        this.id = id;\n        this.pos = new Point(randInt(0, innerWidth), randInt(0, innerHeight));\n        this.vel = new Vector(randUniform(-MAX_SPAWN_VEL, MAX_SPAWN_VEL), randUniform(-MAX_SPAWN_VEL, MAX_SPAWN_VEL));\n        this.infected = infected;\n        this.wasInfected = false;\n    }\n\n    update(people) {\n        // Death\n        if (this.infected && Math.random() < DEATH_RATE) {\n            return true;\n        }\n\n        // Recovery\n        if (this.infected) {\n            if (new Date() - this.infected >= RECOVERY_TIME) {\n                console.log('i recovered');\n                this.infected = null;\n                this.wasInfected = true;\n            }\n        }\n\n        // Avoid edges\n        if (this.pos.x <= BORDER_WIND_MARGIN) {\n            this.vel.add(leftWind);\n        }\n        if (this.pos.x >= innerWidth - BORDER_WIND_MARGIN) {\n            this.vel.add(rightWind);\n        }\n        if (this.pos.y <= BORDER_WIND_MARGIN) {\n            this.vel.add(topWind);\n        }\n        if (this.pos.y >= innerHeight - BORDER_WIND_MARGIN) {\n            this.vel.add(bottomWind);\n        }\n\n        // Separation\n        for (let person of people) {\n            let personToSelf = person.pos.vectorTo(this.pos);\n            let originalLength = personToSelf.len();\n            if (originalLength <= SEPARATION_THRESHOLD) {\n                if (person.infected && !this.infected && !this.wasInfected && TRANSMISSION_RATE(originalLength)) {\n                    this.infected = new Date();\n                }\n                personToSelf.normalize();\n                personToSelf.divide(originalLength);\n                personToSelf.multiply(SEPARATION_STRENGTH);\n                this.vel.add(personToSelf);\n            }\n        }\n\n        // Alignment\n        let averageVel = new Vector(0, 0);\n        let alignmentCounter = 0;\n        for (let person of people) {\n            if (person.pos.vectorTo(this.pos).len() <= ALIGNMENT_THRESHOLD) {\n                averageVel.add(person.vel);\n                alignmentCounter += 1;\n            }\n        }\n        averageVel.divide(alignmentCounter);\n        averageVel.multiply(ALIGNMENT_STRENGTH);\n        this.vel.add(averageVel);\n\n        // Cohesion\n        let averageX = this.pos.x;\n        let averageY = this.pos.y;\n        let cohesionCounter = 1;\n        for (let person of people) {\n            if (person.pos.vectorTo(this.pos).len() <= COHESION_THRESHOLD) {\n                averageX += person.pos.x;\n                averageY += person.pos.y;\n                cohesionCounter++;\n            }\n        }\n        if (cohesionCounter !== 0) {\n            averageX /= cohesionCounter;\n            averageY /= cohesionCounter;\n        }\n        let cohesionVector = this.pos.vectorTo(new Point(averageX, averageY));\n        cohesionVector.multiply(COHESION_STRENGTH);\n        this.vel.add(cohesionVector);\n\n        // Speed Limit\n        if (this.vel.len() > SPEED_LIMIT) {\n            this.vel.normalize(SPEED_LIMIT);\n        }\n\n        return false;\n    }\n\n    move() {\n        this.pos.move(this.vel);\n    }\n\n    draw() {\n        if (this.infected !== null) {\n            fill(255, 0, 0);\n        } else {\n            if (this.wasInfected) {\n                fill(203, 30, 218);\n            } else {\n                fill(170, 198, 202);\n            }\n        }\n        circle(this.pos.x, this.pos.y, 15);\n    }\n}\n","import Person from \"./person\";\n\nlet people = [];\nlet dead = [];\n\nexport function windowResized() {\n    resizeCanvas(innerWidth, innerHeight);\n}\n\nexport function setup() {\n    createCanvas(innerWidth, innerHeight);\n\n    for (let i = 0; i < 99; i++) {\n        people.push(new Person(null, i));\n    }\n    people.push(new Person(new Date(), 99));\n}\n\nfunction update() {\n    for (let person of people) {\n        if (person.update(people.filter(v => v !== person))) {\n            dead.push(person.pos);\n            people = people.filter(v => v !== person);\n        }\n    }\n    for (let person of people) {\n        person.move();\n    }\n}\n\nexport function draw() {\n    update();\n    clear();\n\n    fill(0, 0, 0);\n    for (let person of dead) {\n        circle(person.x, person.y, 15);\n    }\n    for (let person of people) {\n        person.draw();\n    }\n}\n"]}