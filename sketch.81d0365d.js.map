{"version":3,"sources":["vector.js","point.js","utils.js","config.js","person.js","sketch.js"],"names":["Vector","x","y","Math","sqrt","pow","vector","value","divide","len","multiply","Point","point","randInt","min","max","floor","randUniform","random","MAX_SPAWN_VEL","BORDER_WIND_STRENGTH","BORDER_WIND_MARGIN","SEPARATION_THRESHOLD","SEPARATION_STRENGTH","ALIGNMENT_THRESHOLD","ALIGNMENT_STRENGTH","COHESION_THRESHOLD","COHESION_STRENGTH","SPEED_LIMIT","TRANSMISSION_RATE","dist","leftWind","rightWind","topWind","bottomWind","Person","infected","pos","innerWidth","innerHeight","vel","wasInfected","people","add","person","personToSelf","vectorTo","originalLength","normalize","averageVel","alignmentCounter","averageX","averageY","cohesionCounter","cohesionVector","move","fill","circle","windowResized","resizeCanvas","setup","createCanvas","i","push","update","draw","clear"],"mappings":"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","file":"sketch.81d0365d.js","sourceRoot":"../src","sourcesContent":["export default class Vector {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    len() {\n        return Math.sqrt(\n            Math.pow(this.x, 2) +\n            Math.pow(this.y, 2)\n        );\n    }\n\n    add(vector) {\n        this.x += vector.x;\n        this.y += vector.y;\n    }\n\n    subtract(vector) {\n        this.x -= vector.x;\n        this.y -= vector.y;\n    }\n\n    multiply(value) {\n        this.x *= value;\n        this.y *= value;\n    }\n\n    divide(value) {\n        if (value !== 0) {\n            this.x /= value;\n            this.y /= value;\n        }\n    }\n\n    normalize(value=1) {\n        this.divide(this.len());\n        this.multiply(value);\n    }\n}","import Vector from \"./vector\";\n\nexport default class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    move(vector) {\n        this.x += vector.x;\n        this.y += vector.y;\n    }\n\n    vectorTo(point) {\n        return new Vector(point.x - this.x, point.y - this.y);\n    }\n}\n","export function randInt(min, max) {\n    return Math.floor(randUniform(min, max));\n}\n\nexport function randUniform(min, max) {\n    return (Math.random() * (max - min)) + min;\n}\n","export const MAX_SPAWN_VEL = 3;\nexport const BORDER_WIND_STRENGTH = .3;\nexport const BORDER_WIND_MARGIN = 100;\nexport const SEPARATION_THRESHOLD = 50;\nexport const SEPARATION_STRENGTH = 10;\nexport const ALIGNMENT_THRESHOLD = 40;\nexport const ALIGNMENT_STRENGTH = .3;\nexport const COHESION_THRESHOLD = 40;\nexport const COHESION_STRENGTH = .02;\nexport const SPEED_LIMIT = 4;\nexport const TRANSMISSION_RATE = dist => Math.random() <= 4 / dist;\n","import Vector from \"./vector\";\nimport Point from \"./point\";\nimport {randInt, randUniform} from \"./utils\";\nimport {\n    ALIGNMENT_STRENGTH,\n    ALIGNMENT_THRESHOLD,\n    BORDER_WIND_MARGIN,\n    BORDER_WIND_STRENGTH, COHESION_STRENGTH, COHESION_THRESHOLD,\n    MAX_SPAWN_VEL,\n    SEPARATION_STRENGTH,\n    SEPARATION_THRESHOLD,\n    SPEED_LIMIT, TRANSMISSION_RATE\n} from \"./config\";\n\nconst leftWind = new Vector(BORDER_WIND_STRENGTH, 0);\nconst rightWind = new Vector(-BORDER_WIND_STRENGTH, 0);\nconst topWind = new Vector(0, BORDER_WIND_STRENGTH);\nconst bottomWind = new Vector(0, -BORDER_WIND_STRENGTH);\n\nexport default class Person {\n    constructor(infected) {\n        this.pos = new Point(randInt(0, innerWidth), randInt(0, innerHeight));\n        this.vel = new Vector(randUniform(-MAX_SPAWN_VEL, MAX_SPAWN_VEL), randUniform(-MAX_SPAWN_VEL, MAX_SPAWN_VEL));\n        this.infected = infected;\n        this.wasInfected = false;\n    }\n\n    update(people) {\n        // Avoid edges\n        if (this.pos.x <= BORDER_WIND_MARGIN) {\n            this.vel.add(leftWind);\n        }\n        if (this.pos.x >= innerWidth - BORDER_WIND_MARGIN) {\n            this.vel.add(rightWind);\n        }\n        if (this.pos.y <= BORDER_WIND_MARGIN) {\n            this.vel.add(topWind);\n        }\n        if (this.pos.y >= innerHeight - BORDER_WIND_MARGIN) {\n            this.vel.add(bottomWind);\n        }\n\n        // Separation\n        for (let person of people) {\n            let personToSelf = person.pos.vectorTo(this.pos);\n            let originalLength = personToSelf.len();\n            if (originalLength <= SEPARATION_THRESHOLD) {\n                if (person.infected && TRANSMISSION_RATE(originalLength)) {\n                    this.infected = true;\n                }\n                personToSelf.normalize();\n                personToSelf.divide(originalLength);\n                personToSelf.multiply(SEPARATION_STRENGTH);\n                this.vel.add(personToSelf);\n            }\n        }\n\n        // Alignment\n        let averageVel = new Vector(0, 0);\n        let alignmentCounter = 0;\n        for (let person of people) {\n            if (person.pos.vectorTo(this.pos).len() <= ALIGNMENT_THRESHOLD) {\n                averageVel.add(person.vel);\n                alignmentCounter += 1;\n            }\n        }\n        averageVel.divide(alignmentCounter);\n        averageVel.multiply(ALIGNMENT_STRENGTH);\n        this.vel.add(averageVel);\n\n        // Cohesion\n        let averageX = 0;\n        let averageY = 0;\n        let cohesionCounter = 0;\n        for (let person of people) {\n            if (person.pos.vectorTo(this.pos).len() <= COHESION_THRESHOLD) {\n                averageX += person.pos.x;\n                averageY += person.pos.y;\n                cohesionCounter++;\n            }\n        }\n        if (cohesionCounter !== 0) {\n            averageX /= cohesionCounter;\n            averageY /= cohesionCounter;\n        }\n        let cohesionVector = this.pos.vectorTo(new Point(averageX, averageY));\n        cohesionVector.multiply(COHESION_STRENGTH);\n        this.vel.add(cohesionVector);\n\n        // Speed Limit\n        if (this.vel.len() > SPEED_LIMIT) {\n            this.vel.normalize(SPEED_LIMIT);\n        }\n    }\n\n    move() {\n        this.pos.move(this.vel);\n    }\n\n    draw() {\n        if (this.infected) {\n            fill(255, 0, 0);\n        } else {\n            if (this.wasInfected) {\n                fill(203, 30, 218);\n            } else {\n                fill(170, 198, 202);\n            }\n        }\n        circle(this.pos.x, this.pos.y, 15);\n    }\n}\n","import Person from \"./person\";\n\nlet people = [];\n\nexport function windowResized() {\n    resizeCanvas(innerWidth, innerHeight);\n}\n\nexport function setup() {\n    createCanvas(innerWidth, innerHeight);\n\n    for (let i = 0; i < 99; i++) {\n        people.push(new Person(false));\n    }\n    people.push(new Person(true));\n}\n\nfunction update() {\n    for (let person of people) {\n        person.update(people);\n    }\n    for (let person of people) {\n        person.move();\n    }\n}\n\nexport function draw() {\n    update();\n    clear();\n\n    for (let person of people) {\n        person.draw();\n    }\n}\n"]}